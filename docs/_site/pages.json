[{"permalink":"//","layout":"default","title":"Carlie Documentation","content":"# Carlie Documentation\n\nThank you for your support by utilising the Carlie platform. It has been designed to simplify autonomous car research, education and to help facilitate engaging public demos. We hope it makes your life in these areas as simple as possible.\n\nFeatures of the platform include:\n* Integrated IMU with Velocity and Steering Angle Feedback\n* GPS Capabilities\n* Easy control options, with hassle-free transition between Tele-Operation and Autonomous modes\n* Onboard 5G WiFi Router with Accessible Ethernet port\n* Out-of-the-box demos and capabilities, such as LIDAR SLAM\n\nThe hardware on the platform includes:\n* [NVIDIA TX2 Jetson](https://developer.nvidia.com/embedded/jetson-tx2) with [Auvidea J120 Carrier Board](https://auvidea.eu/j120/)\n* [Slamtec RPLIDAR A3](https://www.slamtec.com/en/Lidar/A3)\n* Intel Realsense [D435 Depth](https://www.intelrealsense.com/depth-camera-d435/) and [T265 Tracking](https://www.intelrealsense.com/tracking-camera-t265/) Cameras\n\n\n## Getting Started\n\nBelow are links to documentation that will help you utilise Carlie. If you are Getting Started with the platform we would recommend you read the [Power Management](pages/power_management), [Starting Up Carlie](pages/starting_up_carlie), [Networking Interfaces](pages/carlie_networking_interfaces), [Calibrating and Configuring Carlie](pages/carlie_config_and_calibration) and [Running Existing Demos/Capabilities](pages/carlie_running_existing_capabilities) in that order. If you are wanting to explore the Carlie platform in more detail check out [The 3 levels of Carlie]() and the [Carlie Software Page]().\n\n## Table of Contents\n\n* [Power Management](pages/power_management)\n* [Starting Up and Driving Carlie](pages/starting_up_carlie)\n* [Networking Interfaces](pages/carlie_networking_interfaces)\n* [Running an Existing Demo/Capability](pages/carlie_running_existing_capabilities)\n* Installing and Updating Carlie Software\n* The 3 Levels of Carlie\n* Carlie Software","dir":"/","name":"README.md","path":"README.md","url":"/"},{"sort":1,"permalink":"/pages/","layout":"default","title":"Carlie Documentation","content":"<h1 id=\"carlie-documentation\">Carlie Documentation</h1>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n</code></pre>  </div></div>\n\n<ul>\n <li><a href=\"/pages/power_management.html\">Carlie Power Management</a></li>\n <li><a href=\"/pages/starting_up_carlie.html\">Starting Up and Driving Carlie</a></li>\n <li><a href=\"/pages/carlie_networking_interfaces.html\">Carlie Networking Interfaces</a></li>\n <li><a href=\"/pages/carlie_config_and_calibration.html\">Carlie Config and Calibration</a></li>\n <li><a href=\"/pages/carlie_running_existing_capabilities.html\">Running Existing Demos and Capabilities on Carlie</a></li>\n <li><a href=\"/pages/3_levels_of_carlie.html\">The 3 Levels of Carlie</a></li>\n</ul>\n","dir":"/pages/","name":"README.md","path":"pages/README.md","url":"/pages/"},{"sort":1,"layout":"default","title":"Carlie Power Management","content":"# Carlie Power Management\n\n## Batteries\nCarlie is powered using one or two 3-cell 5000mAh LiPo batteries. To plug in or replace a battery(s):\n\n1. Lift up the shell\n2. Locate the two battery slots and their respective XT60 connector one the low-level control board (white PCB). There is one battery slot/connector on either side of the vehicle.\n3. Plug in one or two 3-cell LiPo batteries. *Plug in one battery if you plan on doing an extended mission (experiments longer than 1.5 hours); see [Battery Hot Swapping](#battery-hot-swapping) for details*.\n4. Lower the shell, ensuring no cables or components are caught on the edge of the shell.\n\n**Safety Warning!** LiPo batteries can be a hazard when used incorrectly. While Carlie has features to prevent LiPo misuse (e.g. over-discharge), we still recommend batteries are removed when the vehicle is not in use.\n\n**Safety Warning!:** LiPo batteries should always be stored in a LiPo safety bag when not in use or when being charged.\n\n**Note:** The approximate worst case run time for a single 3-cell 5000mAh battery is 2 hours.\n\n**Note:** Carlie will automatically power off all systems when the capacity of the batteries drops too low, preventing over-discharge. This power cut-off point occurs when all batteries are close to approximately 9 volts.\n\n**Note:** The Vedder Electronic Speed Control (VESC), which controls linear movement, will prevent the motor from running when the voltage is below 10 volts approximately. However, the computer should still be able to be powered.\n\n## Battery Hot Swapping\nThe Carlie platform has been designed with battery hot swapping capabilities. This allows a fresh battery to be plugged in without shutting down the computer; giving Carlie the ability to undertake extended missions. To hot swap batteries:\n\n1. Plug in a fresh LiPo battery into the empty battery slot. \n2. Wait a second or two.\n3. Unplug the drained LiPo battery.\n4. You can now continue your experiment.\n\n**Tip:** If you plan on running a long duration mission we recommend you power Carlie using only a single LiPo battery. The reason for this is because Carlie cannot monitor the battery charge levels independently and drains the batteries concurrently not sequentially. Hence, you may accidentally unplug the battery that Carlie is currently using and cause a computer shutdown; as the other battery may be below system shutdown voltage.\n\n## Charging Batteries\nCarlie does not have any in situ battery charging capabilities. To charge the batteries you must first remove them from the platform and then use an external charger. The Carlie platform comes standard with an EV-Peak E4, or equivalent, battery charger as well as LiPo safety bags. To use this charger:\n\n1. Turn on the EV-Peak E4 charger and wait until the blue LEDs turn on.\n2. Plug the balance cable, the one with the smaller white connector, of the battery into the appropriate port on the charger.\n3. Place the LiPo battery into a LiPo safety bag (**important**).\n\nIt will take approximately 1.5 hours to fully charge a 5000mAh battery.\n\n**Safety Warning!** Do not leave charging LiPo batteries unattended.\n\n**Safety Warning!** LiPo batteries should always be stored in a LiPo safety bag when not in use or when being charged.\n\n## Flying with LiPo Batteries\nFlying with LiPo batteries is typically not difficult if you follow the rules. Typically, at least in Australia, the rules are as follows:\n\n* You can take two batteries with a capacity of between 100-160 Wh\n* As many batteries as you want with a capacity below 1000 Wh\n\n**Important:** please double check with your local governing board for up to date rules.\n\nTo get the Wh rating of your battery multiple the nominal voltage (number of cells multiplied by 3.7 volts) by the number of Amp-hours (in this case 5000 milli-Amp-hours). The batteries supplied with Carlie are 55.5 Wh and so there should be no issues with taking them on a plane.\n\nWhen flying with batteries you **MUST DO THE FOLLOWING:**\n\n1. Tape the connectors, both the balance and power connectors, on the battery using electrical tape.\n2. Place the batteries in a LiPo safety bag (you can have more than one battery per bag).\n3. Take the batteries in your carry on baggage.\n4. When going through a checkpoint take the LiPo safety bags out of your checked in baggage, much like you would a laptop. You should not need to take the batteries out of the LiPo bags, but follow the directions of all safety officers. Typically a safety office will come and check the state of the batteries, to make sure they are not dangerous (e.g. badly swollen), after they have be through the scanner.\n\nWhen flying with batteries you may be questioned about:\n* Why are you taking batteries?\n* Asked to take the batteries out for re-scanning.\n* Subjected to an explosives test.\n* The capacity of the batteries (55Wh in this case).\n\nThis is all normal, do not be concerned. Typically there are more questions about laptops or bundles of cords than LiPo batteries. Know the rules and work within them and follow all directions of the security officers and you will have no issues travelling with batteries.\n\n\n","dir":"/pages/","name":"power_management.md","path":"pages/power_management.md","url":"/pages/power_management.html"},{"sort":2,"layout":"default","title":"Starting Up and Driving Carlie","content":"# Starting Up and Driving Carlie\n\n## Turning On Carlie\nTo turn on Carlie press the *on button* located on the shell. Pressing the on button provides power to all the various systems and automatically turns on the computer. After a short delay (1-2 minutes) the screen will turn on. The default username and password to the computer are both *nvidia*.\n\nAs part of the start-up sequence the computer will automatically launch the following systems:\n\n* Carlie Base System - this is required to allow the computer to communicate with the low-level hardware (motion control, IMU, GPS, short-range LIDAR sensors) as well as provides the tele-operation via the gamepad and the hassle-free switch between tele-operation and autonomous modes.\n\n## Turning Off Carlie\nTo turn off Carlie we recommend you first shut down the computer in the usual fashion. Once the computer has shut down you can press the off button located on the shell. Pressing the off button disconnects power from all the systems.\n\n**Note:** if you shut down the computer but forget to press the power button the power system will automatically power off if the battery goes too low. See the [Power Management](power_management.md) for more information.\n\n## Driving Carlie\nCarlie can be controlled in three different ways out-of-the-box. These three ways are:\n\n* Tele-operated via the Logitech F710 gamepad (default),\n* Tele-operated via the Traxxas RC Remote that came with the Traxxas Platform (which Carlie is built upon), or\n* Autonomously via computer generated control commands.\n\n### **Tele-Operation via Logitech F710 Gamepad**\nA minute or two after the computer has started up you should be able to drive Carlie using the Logitech Gamepad. The controls are as follows:\n\n* Right Bumper - is a deadman switch. It must be pressed at all times when tele-operating the robot. Releasing it will stop the vehicle.\n* Right Joystick - is used to control the steering.\n* Left Joystick - is used to control the linear velocity.\n\nYou may notice a slight left or right drift when trying to drive straight, please see the [Config and Calibration](#config-and-calibration) routine below on how to remedy this.\n\n**Safety Warning!** We have noticed that the gamepad has a reliable range of about 5 metres. After 5 metres there is some extremely noticeable lag and dropout, and releasing of the deadman switch may not result in an immediate stop. If you wish to be further than 5 metres away from the vehicle while tele-operating we recommend using the RC remote instead.\n\n### **Tele-Operation via Standard RC Remote**\nCarlie can also be operated via the standard RC Remote. While this method does allow for longer range operation, it does mean you cannot have additional capabilities tied to that remote (i.e. a deadman switch or a button to change states etc.). In order to control the platform using the RC Remote you will need to flick the switch that resides next to the Teensy on the Low Level Control Board (white PCB). To do this:\n\n1. Lift up the lid of the platform.\n2. Locate the switch next to the Teensy. You will need to look in from the side.\n3. Flick the switch. \n4. You should now be able to operate the vehicle using the RC remote.\n\nWhile the platform is in this mode, which is dictated by the switch, the car can not receive autonomous control commands. This was a design choice due to safety, as we wanted the user to have to hold down a deadman switch for safety.\n\n### **Autonomous Driving**\nAt some point you will want to the car to perform some autonomous actions. We have made the transistion from Logitech tele-operation to autonomous mode hassle free. To transition from Logitech tele-operation mode to autonomous mode all you need to do is:\n\n1. Bring the car to a halt. \n2. Stop holding the Right Bumper, which we will now call the tele-operation deadman switch.\n3. Press and hold the Left Bumper, which we will now call the autonomous deadman switch.\n4. If there are autonomous car commands being generated then the car would now listen to them rather than the tele-operatio commands.\n\nThis should allow you to easily switch between tele-operation and autonomous modes and allow you to easily reset experiments. The HSV Blob Following Demo shows how you can generate autonomous control commands.\n\n**Note:** for ROS users what we have done is created an exclusive-or multiplexer using the left and right bumpers of the Logitech Gamepad which forwards either the */nightrider/ackermann_cmd/teleop* or */nightrider/ackermann_cmd/autonomous* down to the low level hardware via the */nightrider/ackemann_cmd* topic, depending on which bumper is currently held. All three messages are of type *AckermannDrive*. \n\n## Config and Calibration\nThe platform comes with some default parameters which set aspects such as acceleration and velocity limits. Fortunately these can all be easily changed through a YAML config file. The config file is located at **insert config file location**. In this file the config parameters/values will be commented out. You will need to uncomment them to override the defaults (the defaults are located at **file location**). To change the file:\n\n1. Open up a terminal, either via the applications GUI or by pressing `ctrl+alt+t` on the keyboard.\n2. Change directory to the location of the config file `cd file_location`.\n3. Use Nano, or Vim, to edit the file `nano file_name`.\n4. Uncomment the parameter you wish to specify and change the value.\n5. Once completed save the file. In Nano this is done by pressing `ctrl+x` and then entering `y` to the question do you wish to overwrite this file.\n\nThe config values and their meaning are below. The following values you will wish to change depending on your application/environment:\n\n* **max_reverse_velocity** - this is the maximum reverse velocity you want the car to be able to go; specified in m/s and does require a negative sign (e.g. -1m/s).\n* **max_forward_velocity** - this is the maximum forward velocity you want the platform to go; specified in m/s.\n* **acceleration** - is the acceleration limit; specified in m/s/s.\n* **ignore_proximity_sensors** - set this to true to ignore the four short range LIDAR bumper sensors. The sensors will still be measured and reported but the vehicle will not stop. Current default is true as need to write a filter for spurious false-positives when the car is undulating.\n* **collisision_detection_distance** - the approximate distance in millimetres for when the LIDAR bumper sensors should stop the car.\n\nThe parameters associated with the low level odometry covariance you may wish to change, but you should not need to.\n* **covar_position_<value>** - the covariance for various element of the reported odometry from the low level.\n\nThe following parameters are specific to your exact hardware and while the defaults will probably be sufficient you may wish to calibrate them (see below). The parameter you will probably wish to calibrate is the center_steering_angle, else you may get a left/right drift when wanting to drive straight.\n* **min_throttle_pulse_width** - the minimum throttle (linear velocity) pulse width generated by the RC remote; specified in micro-seconds should be approximately 1000us.\n* **max_throttle_pulse_width** - the maximum throttle (linear velocity) pulse width generated by the RC remote; specified in micro-seconds should be approximately 2000us.\n* **center_throttle_pulse_width** - the pulse generated when the RC throttle is in its neutral position; specified in micro-seconds should be approximately 1500us.\n* **min_steering_angle** - the minimum steering angle possible by the car (wheels are facing to the right when looking in direction of travel); specified in radians and should be negative (e.g. -0.7854 radians).\n* **max_steering_angle** - the maximum steering angle possible by the car (wheels are facing to the left when looking in direction of travel); specified in radians default.\n* **center_steering_angle** - placing the steering servo so 100 degrees corresponds to exactly straight is impossible, hence this parameter. This specifies the center position of the steering; units are in radians and should be approximately 1.75 radians (100 degrees).\n* **min_steering_angle_pulse_width** - the minimum pulse width generated by the RC remote when steering; specified in micro-seconds should be approximately 1000us.\n* **max_steering_angle_pulse_width** - the maximum pulse width generated by the RC remote when steering; specified in micro-seconds should be approximately 2000us.\n* **lidar_front_right_address** - the I2C address of the front right LIDAR bumper sensor.\n* **lidar_front_left_address** - the I2C address of the front left LIDAR bumper sensor.\n* **lidar_back_right_address** - the I2C address of the back right LIDAR bumper sensor.\n* **lidar_back_left_address** - the I2C address of the back left LIDAR bumper sensor.\n\nThe following parameters should not need to be changed. They are merely broken out as config values for ease of use, so the Teensy does not need to be reprogrammed each time.\n* **wheel_base** - the distance between the front and rear axle of the platform; specified in metres.\n* **wheel_radius** - the radius of the wheels; specified in metres defaults to 0.059m.\n* **gear_ratio_wheel_2_motor** - the gear ratio from the wheel to the motor, should be a value greater than 1.\n* **motor_poles** - the number of motor poles, as specified by the VESC documentation. We believe the VESC documentation is wrong as the motor should have more than 1 pole, but the conversion required to go from E-RPM to RPM is only sensible if you use a value of 1 here.\n* **motor_ticks_per_revolution - the number of motor ticks per single revolution.\n* **battery_voltage_offset** - the offset between the battery voltage measured by the VESC and the actual voltage due to voltage offsets caused by components such as diodes (this should be approximately constant); specified in volts.\n\nThe easiest way to calibrate the steering angle is as follows:\n\n1. Turn on the car and make sure it is in Logitech Tele-Operation mode.\n2. Manually drive the car forward a few metres and see if there is any left/right drift.\n3. If there is drift slightly alter the center_steering_angle parameter within the local config file (<file_location>). If it is steering left add(?) to this value, if right subtract(?) from it.\n4. You will need to restart the Carlie base package to update the parameter. This can be done by `pm2 restart nightrider_base`.\n5. Give the car 0.5-1 minute to restart the base and then repeat the process. You will most likely not be able to get a car that can drive perfectly straight over a long straight due to the fact the discritization of the angles the servo can physically achieve.\n\nThe default pulse width RC remote parameters will do in most cases. However, we do recommend you calibrate them. To calibrate:\n\n1. Somehow upload the calibration firmware. Gavin this is on you\n2. James how do they use it?\n\n**Tip:** on the side of the RC remote there is a steering trim knob. If this is steering trim does not align with the value specified in the *center_throttle_pulse_width* parameter your car will drift left or right. Changing the steering trim will change the wheel alignment. However, we recommend first set the *center_steering_angle* parameter as outlined below. After setting this parameter set the steering trim knob to the neutral position, or as close as possible (1500us pulse width). Then calibrate the pulse width parameters, again see below for calibration routine. Then when you are using the RC remote changing the steering trim should not cause errors in reported measurements due to a mismatch in offsets.","dir":"/pages/","name":"starting_up_carlie.md","path":"pages/starting_up_carlie.md","url":"/pages/starting_up_carlie.html"},{"sort":3,"layout":"default","title":"Carlie Networking Interfaces","content":"<h1 id=\"carlie-networking-interfaces\">Carlie Networking Interfaces</h1>\n\n<p>The Carlie Platform has two ways in which you can connect to it via networking. The first is connecting the Jetson TX2 to your local network via WiFi; we leave this up to the user to setup. The second is connecting to the WiFi network generated by the onboard WiFi router. However, we recommend you first setup this router, but you can use the default if you wish. We left the router in the default state as your settings may depend on your work environment. The default WiFi SSID will be of the form <em>GL-AR750S-xxx</em> and the Password is <em>goodlife</em>. However, we do recommend the following setup:</p>\n\n<ol>\n <li>Using an external computer/laptop connect to the onboard WiFi network. Default SSID: <em>GL-AR750S-xxx</em> Password: <em>goodlife</em></li>\n <li>Open an internet browser and go to 192.0….</li>\n <li>What settings now Gavin</li>\n</ol>\n\n<p>The onboard WiFi router creates both a 2.4 and 5G local WiFi network. Naturally this WiFi network does not have internet access. The onboard computer, the Jetson TX2, also connects to this network/router via a wired ethernet connection. To connect to this network do the following:</p>\n\n<ol>\n <li>Gavin insert instructions</li>\n <li>blah</li>\n</ol>\n\n<p>Additionally, you can connect to this local network via an ethernet connection using the ethernet port located on the shell.</p>\n","dir":"/pages/","name":"carlie_networking_interfaces.md","path":"pages/carlie_networking_interfaces.md","url":"/pages/carlie_networking_interfaces.html"},{"sort":4,"layout":"default","title":"Carlie Config and Calibration","content":"<h1 id=\"carlie-config-and-calibration\">Carlie Config and Calibration</h1>\n\n<h2 id=\"config-parameters\">Config Parameters</h2>\n<p>The platform comes with some default parameters which set aspects such as acceleration and velocity limits. Fortunately these can all be easily changed through a YAML config file. The config file is located at <strong>insert config file location</strong>. In this file the config parameters/values will be commented out. You will need to uncomment them to override the defaults (the defaults are located at <strong>file location</strong>). To change the file:</p>\n\n<ol>\n <li>Open up a terminal, either via the applications GUI or by pressing <code class=\"language-plaintext highlighter-rouge\">ctrl+alt+t</code> on the keyboard.</li>\n <li>Change directory to the location of the config file <code class=\"language-plaintext highlighter-rouge\">cd file_location</code>.</li>\n <li>Use Nano, or Vim, to edit the file <code class=\"language-plaintext highlighter-rouge\">nano file_name</code>.</li>\n <li>Uncomment the parameter you wish to specify and change the value.</li>\n <li>Once completed save the file. In Nano this is done by pressing <code class=\"language-plaintext highlighter-rouge\">ctrl+x</code> and then entering <code class=\"language-plaintext highlighter-rouge\">y</code> to the question do you wish to overwrite this file.</li>\n</ol>\n\n<p>The config values and their meaning are below. The following values you will wish to change depending on your application/environment (any parameters followed by (*) can be dynamically reconfigured; the calibration routine for the center_steering_angle parameter below shows you how you can update these at runtime):</p>\n\n<ul>\n <li><strong>max_reverse_velocity(*)</strong> - this is the maximum reverse velocity you want the car to be able to go; specified in m/s and does require a negative sign (e.g. -1m/s).</li>\n <li><strong>max_forward_velocity(*)</strong> - this is the maximum forward velocity you want the platform to go; specified in m/s.</li>\n <li><strong>acceleration(*)</strong> - is the acceleration limit; specified in m/s/s.</li>\n <li><strong>ignore_proximity_sensors(*)</strong> - set this to true to ignore the four short range LIDAR bumper sensors. The sensors will still be measured and reported but the vehicle will not stop. Current default is true as need to write a filter for spurious false-positives when the car is undulating.</li>\n <li><strong>collisision_detection_distance(*)</strong> - the approximate distance in millimetres for when the LIDAR bumper sensors should stop the car.</li>\n</ul>\n\n<p>The parameters associated with the low level odometry covariance you may wish to change, but you should not need to.</p>\n<ul>\n <li>**covar_position_<value>** - the covariance for various element of the reported odometry from the low level.</value></li>\n</ul>\n\n<p>The following parameters are specific to your exact hardware and while the defaults will probably be sufficient you may wish to calibrate them (see below). The parameter you will probably wish to calibrate is the center_steering_angle, else you may get a left/right drift when wanting to drive straight.</p>\n<ul>\n <li><strong>min_throttle_pulse_width</strong> - the minimum throttle (linear velocity) pulse width generated by the RC remote; specified in micro-seconds should be approximately 1000us.</li>\n <li><strong>max_throttle_pulse_width</strong> - the maximum throttle (linear velocity) pulse width generated by the RC remote; specified in micro-seconds should be approximately 2000us.</li>\n <li><strong>center_throttle_pulse_width</strong> - the pulse generated when the RC throttle is in its neutral position; specified in micro-seconds should be approximately 1500us.</li>\n <li><strong>min_steering_angle</strong> - the minimum steering angle possible by the car (wheels are facing to the right when looking in direction of travel); specified in radians and should be negative (e.g. -0.7854 radians).</li>\n <li><strong>max_steering_angle</strong> - the maximum steering angle possible by the car (wheels are facing to the left when looking in direction of travel); specified in radians default.</li>\n <li><strong>center_steering_angle(*)</strong> - placing the steering servo so 100 degrees corresponds to exactly straight is impossible, hence this parameter. This specifies the center position of the steering; units are in radians and should be approximately 1.75 radians (100 degrees).</li>\n <li><strong>min_steering_angle_pulse_width</strong> - the minimum pulse width generated by the RC remote when steering; specified in micro-seconds should be approximately 1000us.</li>\n <li><strong>max_steering_angle_pulse_width</strong> - the maximum pulse width generated by the RC remote when steering; specified in micro-seconds should be approximately 2000us.</li>\n <li><strong>lidar_front_right_address</strong> - the I2C address of the front right LIDAR bumper sensor.</li>\n <li><strong>lidar_front_left_address</strong> - the I2C address of the front left LIDAR bumper sensor.</li>\n <li><strong>lidar_back_right_address</strong> - the I2C address of the back right LIDAR bumper sensor.</li>\n <li><strong>lidar_back_left_address</strong> - the I2C address of the back left LIDAR bumper sensor.</li>\n</ul>\n\n<p>The following parameters should not need to be changed. They are merely broken out as config values for ease of use, so the Teensy does not need to be reprogrammed each time.</p>\n<ul>\n <li><strong>wheel_base</strong> - the distance between the front and rear axle of the platform; specified in metres.</li>\n <li><strong>wheel_radius</strong> - the radius of the wheels; specified in metres defaults to 0.059m.</li>\n <li><strong>gear_ratio_wheel_2_motor</strong> - the gear ratio from the wheel to the motor, should be a value greater than 1.</li>\n <li><strong>motor_poles</strong> - the number of motor poles, as specified by the VESC documentation. We believe the VESC documentation is wrong as the motor should have more than 1 pole, but the conversion required to go from E-RPM to RPM is only sensible if you use a value of 1 here.</li>\n <li><strong>motor_ticks_per_revolution</strong> - the number of motor ticks per single revolution.</li>\n <li><strong>battery_voltage_offset</strong> - the offset between the battery voltage measured by the VESC and the actual voltage due to voltage offsets caused by components such as diodes (this should be approximately constant); specified in volts.</li>\n</ul>\n\n<h2 id=\"calibrating-carlie\">Calibrating Carlie</h2>\n\n<p>The main parameter you will need to calibrate is the center_steering_angle. The easiest way to calibrate the steering angle is as follows:</p>\n\n<ol>\n <li>Turn on the car and make sure it is in Logitech Tele-Operation mode.</li>\n <li>Manually drive the car forward a few metres and see if there is any left/right drift.</li>\n <li>If there is drift slightly alter the center_steering_angle parameter by opening up a terminal and running the command <code class=\"language-plaintext highlighter-rouge\">rosparam set center_steering_angle &lt;value&gt;</code>. If it is steering left add(?) to this value, if right subtract(?) from it.</li>\n <li>Repeat steps 2 and 3 until you are happy with the result. You will most likely not be able to get a car that can drive perfectly straight over a long straight due to the fact the discritization of the angles the servo can physically achieve.</li>\n <li>Once you are happy with the result you will need to make the change official by updating the local config file. To do this follow the steps outlined above. If you cannot remember what value you set the center_steering_angle parameter to run the following command <code class=\"language-plaintext highlighter-rouge\">rosparam get center_steering_angle</code>.</li>\n</ol>\n\n<p>The default pulse width RC remote parameters will do in most cases. However, we do recommend you calibrate them. To calibrate:</p>\n\n<ol>\n <li>Somehow upload the calibration firmware. Gavin this is on you</li>\n <li>James how do they use it?</li>\n</ol>\n\n<p><strong>Tip:</strong> on the side of the RC remote there is a steering trim knob. If this is steering trim does not align with the value specified in the <em>center_throttle_pulse_width</em> parameter your car will drift left or right. Changing the steering trim will change the wheel alignment. However, we recommend first set the <em>center_steering_angle</em> parameter as outlined below. After setting this parameter set the steering trim knob to the neutral position, or as close as possible (1500us pulse width). Then calibrate the pulse width parameters, again see below for calibration routine. Then when you are using the RC remote changing the steering trim should not cause errors in reported measurements due to a mismatch in offsets.</p>\n","dir":"/pages/","name":"carlie_config_and_calibration.md","path":"pages/carlie_config_and_calibration.md","url":"/pages/carlie_config_and_calibration.html"},{"sort":5,"layout":"default","title":"Running Existing Demos and Capabilities on Carlie","content":"<h1 id=\"running-existing-demos-and-capabilities-on-carlie\">Running Existing Demos and Capabilities on Carlie</h1>\n","dir":"/pages/","name":"carlie_running_existing_capabilities.md","path":"pages/carlie_running_existing_capabilities.md","url":"/pages/carlie_running_existing_capabilities.html"},{"sort":7,"layout":"default","title":"The 3 Levels of Carlie","content":"<h1 id=\"the-3-levels-of-carlie\">The 3 Levels of Carlie</h1>\n<p>The Carlie platform exists of 3 levels in both its hardware and software design. These levels are:</p>\n\n<ol>\n <li>The low-level layer</li>\n <li>The base layer</li>\n <li>The sensor layer</li>\n</ol>\n\n<p>We have developed these layers to allow you to develop the fourth level, the application layer, as easily as possible. However, we have also developed Carlie with this 3 level principle to allow you to change components easily, such as the computation module or the sensors. Please note, we will sometimes use the term ‘high-level’ to refer to the combination of the base and sensor layers.</p>\n\n<h2 id=\"the-low-level-layer\">The Low-Level Layer</h2>\n<p>The low-level layer consists of all the hardware and software components required to make the platform physically move. This includes:</p>\n<ul>\n <li>A power management system</li>\n <li>A Vedder Electronic Speed Control (VESC) board to manage the brushless motor</li>\n <li>A micro-controller to interface to various low-level hardware components, such as the VESC and GPS</li>\n <li>A tachometer, steering angle, IMU, GPS and proximity sensors</li>\n <li>A control interface via the standard RC remote (meaning a computer does not need to be connected to allow Carlie to be tele-operated)</li>\n <li>A motor emergency stop button</li>\n</ul>\n\n<p>The micro-controller acts as a ROS node and publishes and subscribes to the following topics:</p>\n\n<ul>\n <li>The <strong>/carlie/ackermann_cmd</strong> topic - contains the control values to be performed, such as the linear velocity and steering angle.</li>\n <li>blah blah blah</li>\n</ul>\n\n<p>The Carlie platform could have been built without the micro-controller, but this would mean the computer would have been required to connect with all the above sensors listed as well as the VESC. By having a micro-controller take care of these interfaces and to perform some preliminary filtering/analysis of the data, it means that only a single connection is required by the computer to control the movement of the platform. Additionally, this means that the computer can easily be swapped out for a different device and all that is required to control the car is a single USB and the carlie_base ROS package to be installed. The figure below shows how the low-level hardware components are connected.</p>\n\n<p><img src=\"assets/HardwareArchitecture.png\" alt=\"\" /></p>\n\n<h2 id=\"the-base-layer\">The Base Layer</h2>\n<p>The base layer contains the computer as well as the ROS software required to communicate with the low-level hardware. Therefore, this base layer controls the movement of the platform via a computer interfacing with the low-level layer. The base layer consists of the computer and two ROS packages, <a href=\"https://github.com/RoboticVisionOrg/carlie_msgs\"><strong>carlie_msgs</strong></a> and <a href=\"https://github.com/RoboticVisionOrg/carlie_base\"><strong>carlie_base</strong></a>.</p>\n\n<p>The <a href=\"https://github.com/RoboticVisionOrg/carlie_msgs\"><strong>carlie_msgs</strong></a> ROS package contains the message definitions for custom topics used to transfer data between the computer and the micro-controller on the low level. These message types are:</p>\n\n<ul>\n <li>The <strong>CarlieConfig</strong> and <strong>CarlieConfigStamped</strong> - contains data/values used to configure characteristics of the platform, such as the maximum velocity.</li>\n <li>The <strong>CarlieRawMotionData</strong> and <strong>CarlieRawMotionDataStamped</strong> - contains raw tachometer and motor RPM values provided by the VESC.</li>\n <li>The <strong>CarlieRawOdom</strong> and <strong>CarlieRawOdomStamped</strong> - contains the current estimate for the linear and angular velocity computed by the micro-controller (the standard ROS odometry message was to data heavy to be passed between the computer and the micro-controller at suitable frequencies).</li>\n <li>The <strong>CarlieRawProximityData</strong> and <strong>CarlieRawProximityDataStamped</strong> - contains the raw proximity data provided by the short range LIDAR sensors.</li>\n <li>The <strong>CarlieStatus</strong> and <strong>CarlieStatusStamped</strong> - contains data/values stating the current state of the low-level system, such as whether movement is currently enabled.</li>\n</ul>\n\n<p>The <a href=\"https://github.com/RoboticVisionOrg/carlie_base\"><strong>carlie_base</strong></a> ROS package contains three nodes and a singular launch file. The three nodes are:</p>\n\n<ul>\n <li>The <strong>config_node</strong> - attempts to set the Carlie config values on the micro-controller to be those specified by the ROS parameter server.</li>\n <li>The <strong>low_level_converter_node</strong> - converts topics coming from the micro-controller that are not in standard ROS message formats, such as the raw odometry data.</li>\n <li>The <strong>driver_node</strong> - which listens to the <em>joy</em> and <em>/carlie/ackermann_cmd/autonomous</em> topics and publishes the <em>/carlie/ackermann_cmd</em>, <em>/carlie/ackermann_cmd/teleop</em> and <em>/carlie/estop/gamepad</em> topics. The node also multiplexes the right- and left-bumpers of the Logitech F710 gamepad to enable hassle-free transition between the tele-operation and autonomous modes. If the right-bumper is held-down the <em>/carlie/ackermann_cmd/teleop</em> topic is copied into the <em>/carlie/ackermann_cmd</em> topic which is then passed onto the micro-controller. If the left-bumper is held-down the <em>/carlie/ackermann_cmd/autonomous</em> topic is copied into the <em>/carlie/ackermann_cmd</em> topic and then passed onto the micro-controller. If both right- and left-bumper or neither button is held down the <em>/nightrider/estop/gamepad</em> topic is set to false and the speed within the <em>/carlie/ackermann_cmd</em> topic is set to zero.</li>\n</ul>\n\n<p>The figure below shows the nodes, topics and connections when the base layer and low-level ROS packages are running.</p>\n\n<h2 id=\"the-sensor-layer\">The Sensor Layer</h2>\n","dir":"/pages/","name":"3_levels_of_carlie.md","path":"pages/3_levels_of_carlie.md","url":"/pages/3_levels_of_carlie.html"}]